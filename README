jar2xml is a tool to extract API information from a java archive
and associated documentation.  The information is stored in XML format.

Easy comparison:

	$ java -jar jar2xml.jar --jar=/home/atsushi/android-sdk-linux_x86/platforms/android-8/android.jar --out=_8.xml --docpath=/home/atsushi/android-sdk-linux_x86/docs/reference
	$ mono-xmltool --prettyprint 8.xml > 8_.xml
	$ xmlstarlet c14n 8_.xml > 8.xml
	$ mono-xmltool --prettyprint _8.xml > _8_.xml
	$ xmlstarlet c14n _8_.xml > _8.xml
	$ diff -u 8.xml _8.xml

It is also implemented as "make test-8"

Difference from AOSP API XML:

- generics on interface name should contain arguments part (i.e. <Foo>).
  e.g. "android.accounts.AccountManagerCallback" should be 
       "android.accounts.AccountManagerCallback<V>"

  This will lead to huge reduction on monodroid/Mono.Android/metadata.

  - Class/@name and constructor/@type are already generic aware.

TODO:

- retrieve member annotations from javadoc. (See Notes on Annotations described later.)


Notes on Annotations:

Current implementation uses java.lang.reflect API to get member
annotations, but it won't work as expected.

I found that .class files in android.jar are stripped off field
annotations. For example, java.net.HttpURLConnection#HTTP_SERVER_ERROR 
should be annotated with @Deprecated, but it isn't.
On the other hand, class annotations are alive.
(e.g. java/security/Certificate.class)

The reason why we somehow retrieved @Deprecated on
HttpURLConnection#HTTP_SERVER_ERROR is likely that
URLClassLoader.getClass() actually does not load java.* classes from
the jar contents but just returns the runtime one (such as openjdk).

Javassist.Loader javadoc explains its limitation on loading java.*
 / javax.* classes. [*1]

(So, it is not even about "runtime visible/invisible annotations".
I tried to read android.jar classes using ASM ClassReader [*2] and
it couldn't find any annotations on FieldNode (and from what I read
from asm sources, I believe it is by no means bug in ASM).

[*1] http://www.csg.is.titech.ac.jp/~chiba/javassist/html/javassist/Loader.html
[*2] http://asm.ow2.org/asm33/javadoc/user/org/objectweb/asm/ClassReader.html


